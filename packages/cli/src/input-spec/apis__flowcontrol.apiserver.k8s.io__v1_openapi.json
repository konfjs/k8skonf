{
  "components": {
    "schemas": {
      "ExemptPriorityLevelConfigurationv1": {
        "description": "ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests. In the mandatory exempt configuration object the values in the fields here can be modified by authorized users, unlike the rest of the `spec`.",
        "properties": {
          "lendablePercent": {
            "description": "`lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels.  This value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\nLendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )",
            "format": "int32",
            "type": "integer"
          },
          "nominalConcurrencyShares": {
            "description": "`nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats nominally reserved for this priority level. This DOES NOT limit the dispatching from this priority level but affects the other priority levels through the borrowing mechanism. The server's concurrency limit (ServerCL) is divided among all the priority levels in proportion to their NCS values:\n\nNominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)\n\nBigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level. This field has a default value of zero.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "FlowDistinguisherMethodv1": {
        "description": "FlowDistinguisherMethod specifies the method of a flow distinguisher.",
        "properties": {
          "type": {
            "default": "",
            "description": "`type` is the type of flow distinguisher method The supported types are \"ByUser\" and \"ByNamespace\". Required.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object"
      },
      "FlowSchemav1": {
        "description": "FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a \"flow distinguisher\".",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectMetav1"
              }
            ],
            "default": {},
            "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FlowSchemaSpecv1"
              }
            ],
            "default": {},
            "description": "`spec` is the specification of the desired behavior of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FlowSchemaStatusv1"
              }
            ],
            "default": {},
            "description": "`status` is the current status of a FlowSchema. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "FlowSchema",
            "version": "v1"
          }
        ]
      },
      "FlowSchemaConditionv1": {
        "description": "FlowSchemaCondition describes conditions for a FlowSchema.",
        "properties": {
          "lastTransitionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timev1"
              }
            ],
            "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another."
          },
          "message": {
            "description": "`message` is a human-readable message indicating details about last transition.",
            "type": "string"
          },
          "reason": {
            "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition.",
            "type": "string"
          },
          "status": {
            "description": "`status` is the status of the condition. Can be True, False, Unknown. Required.",
            "type": "string"
          },
          "type": {
            "description": "`type` is the type of the condition. Required.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "FlowSchemaSpecv1": {
        "description": "FlowSchemaSpec describes how the FlowSchema's specification looks like.",
        "properties": {
          "distinguisherMethod": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FlowDistinguisherMethodv1"
              }
            ],
            "description": "`distinguisherMethod` defines how to compute the flow distinguisher for requests that match this schema. `nil` specifies that the distinguisher is disabled and thus will always be the empty string."
          },
          "matchingPrecedence": {
            "default": 0,
            "description": "`matchingPrecedence` is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) MatchingPrecedence.  Each MatchingPrecedence value must be ranged in [1,10000]. Note that if the precedence is not specified, it will be set to 1000 as default.",
            "format": "int32",
            "type": "integer"
          },
          "priorityLevelConfiguration": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriorityLevelConfigurationReferencev1"
              }
            ],
            "default": {},
            "description": "`priorityLevelConfiguration` should reference a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status. Required."
          },
          "rules": {
            "description": "`rules` describes which requests will match this flow schema. This FlowSchema matches a request if and only if at least one member of rules matches the request. if it is an empty slice, there will be no requests matching the FlowSchema.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PolicyRulesWithSubjectsv1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "priorityLevelConfiguration"
        ],
        "type": "object"
      },
      "FlowSchemaStatusv1": {
        "description": "FlowSchemaStatus represents the current state of a FlowSchema.",
        "properties": {
          "conditions": {
            "description": "`conditions` is a list of the current states of FlowSchema.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/FlowSchemaConditionv1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "type"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "type",
            "x-kubernetes-patch-strategy": "merge"
          }
        },
        "type": "object"
      },
      "GroupSubjectv1": {
        "description": "GroupSubject holds detailed information for group-kind subject.",
        "properties": {
          "name": {
            "default": "",
            "description": "name is the user group that matches, or \"*\" to match all user groups. See https://github.com/kubernetes/apiserver/blob/master/pkg/authentication/user/user.go for some well-known group names. Required.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "LimitResponsev1": {
        "description": "LimitResponse defines how to handle requests that can not be executed right now.",
        "properties": {
          "queuing": {
            "allOf": [
              {
                "$ref": "#/components/schemas/QueuingConfigurationv1"
              }
            ],
            "description": "`queuing` holds the configuration parameters for queuing. This field may be non-empty only if `type` is `\"Queue\"`."
          },
          "type": {
            "default": "",
            "description": "`type` is \"Queue\" or \"Reject\". \"Queue\" means that requests that can not be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. \"Reject\" means that requests that can not be executed upon arrival are rejected. Required.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "x-kubernetes-unions": [
          {
            "discriminator": "type",
            "fields-to-discriminateBy": {
              "queuing": "Queuing"
            }
          }
        ]
      },
      "LimitedPriorityLevelConfigurationv1": {
        "description": "LimitedPriorityLevelConfiguration specifies how to handle requests that are subject to limits. It addresses two issues:\n  - How are requests for this priority level limited?\n  - What should be done with requests that exceed the limit?",
        "properties": {
          "borrowingLimitPercent": {
            "description": "`borrowingLimitPercent`, if present, configures a limit on how many seats this priority level can borrow from other priority levels. The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit on the total number of seats that this level may borrow at any one time. This field holds the ratio of that limit to the level's nominal concurrency limit. When this field is non-nil, it must hold a non-negative integer and the limit is calculated as follows.\n\nBorrowingCL(i) = round( NominalCL(i) * borrowingLimitPercent(i)/100.0 )\n\nThe value of this field can be more than 100, implying that this priority level can borrow a number of seats that is greater than its own nominal concurrency limit (NominalCL). When this field is left `nil`, the limit is effectively infinite.",
            "format": "int32",
            "type": "integer"
          },
          "lendablePercent": {
            "description": "`lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed by other priority levels. The value of this field must be between 0 and 100, inclusive, and it defaults to 0. The number of seats that other levels can borrow from this level, known as this level's LendableConcurrencyLimit (LendableCL), is defined as follows.\n\nLendableCL(i) = round( NominalCL(i) * lendablePercent(i)/100.0 )",
            "format": "int32",
            "type": "integer"
          },
          "limitResponse": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitResponsev1"
              }
            ],
            "default": {},
            "description": "`limitResponse` indicates what to do with requests that can not be executed right now"
          },
          "nominalConcurrencyShares": {
            "description": "`nominalConcurrencyShares` (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level. This is the number of execution seats available at this priority level. This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels borrowing seats from this level. The server's concurrency limit (ServerCL) is divided among the Limited priority levels in proportion to their NCS values:\n\nNominalCL(i)  = ceil( ServerCL * NCS(i) / sum_ncs ) sum_ncs = sum[priority level k] NCS(k)\n\nBigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level.\n\nIf not specified, this field defaults to a value of 30.\n\nSetting this field to zero supports the construction of a \"jail\" for this priority level that is used to hold some request(s)",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "NonResourcePolicyRulev1": {
        "description": "NonResourcePolicyRule is a predicate that matches non-resource requests according to their verb and the target non-resource URL. A NonResourcePolicyRule matches a request if and only if both (a) at least one member of verbs matches the request and (b) at least one member of nonResourceURLs matches the request.",
        "properties": {
          "nonResourceURLs": {
            "description": "`nonResourceURLs` is a set of url prefixes that a user should have access to and may not be empty. For example:\n  - \"/healthz\" is legal\n  - \"/hea*\" is illegal\n  - \"/hea\" is legal but matches nothing\n  - \"/hea/*\" also matches nothing\n  - \"/healthz/*\" matches all per-component health checks.\n\"*\" matches all non-resource urls. if it is present, it must be the only entry. Required.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "verbs": {
            "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs. If it is present, it must be the only entry. Required.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set"
          }
        },
        "required": [
          "verbs",
          "nonResourceURLs"
        ],
        "type": "object"
      },
      "PolicyRulesWithSubjectsv1": {
        "description": "PolicyRulesWithSubjects prescribes a test that applies to a request to an apiserver. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. This PolicyRulesWithSubjects matches a request if and only if both (a) at least one member of subjects matches the request and (b) at least one member of resourceRules or nonResourceRules matches the request.",
        "properties": {
          "nonResourceRules": {
            "description": "`nonResourceRules` is a list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/NonResourcePolicyRulev1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "resourceRules": {
            "description": "`resourceRules` is a slice of ResourcePolicyRules that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ResourcePolicyRulev1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "subjects": {
            "description": "subjects is the list of normal user, serviceaccount, or group that this rule cares about. There must be at least one member in this slice. A slice that includes both the system:authenticated and system:unauthenticated user groups matches every request. Required.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Subjectv1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          }
        },
        "required": [
          "subjects"
        ],
        "type": "object"
      },
      "PriorityLevelConfigurationv1": {
        "description": "PriorityLevelConfiguration represents the configuration of a priority level.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectMetav1"
              }
            ],
            "default": {},
            "description": "`metadata` is the standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "spec": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriorityLevelConfigurationSpecv1"
              }
            ],
            "default": {},
            "description": "`spec` is the specification of the desired behavior of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          },
          "status": {
            "allOf": [
              {
                "$ref": "#/components/schemas/PriorityLevelConfigurationStatusv1"
              }
            ],
            "default": {},
            "description": "`status` is the current status of a \"request-priority\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "PriorityLevelConfiguration",
            "version": "v1"
          }
        ]
      },
      "PriorityLevelConfigurationConditionv1": {
        "description": "PriorityLevelConfigurationCondition defines the condition of priority level.",
        "properties": {
          "lastTransitionTime": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timev1"
              }
            ],
            "description": "`lastTransitionTime` is the last time the condition transitioned from one status to another."
          },
          "message": {
            "description": "`message` is a human-readable message indicating details about last transition.",
            "type": "string"
          },
          "reason": {
            "description": "`reason` is a unique, one-word, CamelCase reason for the condition's last transition.",
            "type": "string"
          },
          "status": {
            "description": "`status` is the status of the condition. Can be True, False, Unknown. Required.",
            "type": "string"
          },
          "type": {
            "description": "`type` is the type of the condition. Required.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "PriorityLevelConfigurationReferencev1": {
        "description": "PriorityLevelConfigurationReference contains information that points to the \"request-priority\" being used.",
        "properties": {
          "name": {
            "default": "",
            "description": "`name` is the name of the priority level configuration being referenced Required.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "PriorityLevelConfigurationSpecv1": {
        "description": "PriorityLevelConfigurationSpec specifies the configuration of a priority level.",
        "properties": {
          "exempt": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ExemptPriorityLevelConfigurationv1"
              }
            ],
            "description": "`exempt` specifies how requests are handled for an exempt priority level. This field MUST be empty if `type` is `\"Limited\"`. This field MAY be non-empty if `type` is `\"Exempt\"`. If empty and `type` is `\"Exempt\"` then the default values for `ExemptPriorityLevelConfiguration` apply."
          },
          "limited": {
            "allOf": [
              {
                "$ref": "#/components/schemas/LimitedPriorityLevelConfigurationv1"
              }
            ],
            "description": "`limited` specifies how requests are handled for a Limited priority level. This field must be non-empty if and only if `type` is `\"Limited\"`."
          },
          "type": {
            "default": "",
            "description": "`type` indicates whether this priority level is subject to limitation on request execution.  A value of `\"Exempt\"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.  A value of `\"Limited\"` means that (a) requests of this priority level _are_ subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level. Required.",
            "type": "string"
          }
        },
        "required": [
          "type"
        ],
        "type": "object",
        "x-kubernetes-unions": [
          {
            "discriminator": "type",
            "fields-to-discriminateBy": {
              "exempt": "Exempt",
              "limited": "Limited"
            }
          }
        ]
      },
      "PriorityLevelConfigurationStatusv1": {
        "description": "PriorityLevelConfigurationStatus represents the current state of a \"request-priority\".",
        "properties": {
          "conditions": {
            "description": "`conditions` is the current state of \"request-priority\".",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/PriorityLevelConfigurationConditionv1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "type"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "type",
            "x-kubernetes-patch-strategy": "merge"
          }
        },
        "type": "object"
      },
      "QueuingConfigurationv1": {
        "description": "QueuingConfiguration holds the configuration parameters for queuing",
        "properties": {
          "handSize": {
            "default": 0,
            "description": "`handSize` is a small positive number that configures the shuffle sharding of requests into queues.  When enqueuing a request at this priority level the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here.  The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).  See the user-facing documentation for more extensive guidance on setting this field.  This field has a default value of 8.",
            "format": "int32",
            "type": "integer"
          },
          "queueLengthLimit": {
            "default": 0,
            "description": "`queueLengthLimit` is the maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.  This value must be positive.  If not specified, it will be defaulted to 50.",
            "format": "int32",
            "type": "integer"
          },
          "queues": {
            "default": 0,
            "description": "`queues` is the number of queues for this priority level. The queues exist independently at each apiserver. The value must be positive.  Setting it to 1 effectively precludes shufflesharding and thus makes the distinguisher method of associated flow schemas irrelevant.  This field has a default value of 64.",
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "ResourcePolicyRulev1": {
        "description": "ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==\"\"`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.",
        "properties": {
          "apiGroups": {
            "description": "`apiGroups` is a list of matching API groups and may not be empty. \"*\" matches all API groups and, if present, must be the only entry. Required.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "clusterScope": {
            "description": "`clusterScope` indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or false then the `namespaces` field must contain a non-empty list.",
            "type": "boolean"
          },
          "namespaces": {
            "description": "`namespaces` is a list of target namespaces that restricts matches.  A request that specifies a target namespace matches only if either (a) this list contains that target namespace or (b) this list contains \"*\".  Note that \"*\" matches any specified namespace but does not match a request that _does not specify_ a namespace (see the `clusterScope` field for that). This list may be empty, but only if `clusterScope` is true.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "resources": {
            "description": "`resources` is a list of matching resources (i.e., lowercase and plural) with, if desired, subresource.  For example, [ \"services\", \"nodes/status\" ].  This list may not be empty. \"*\" matches all resources and, if present, must be the only entry. Required.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set"
          },
          "verbs": {
            "description": "`verbs` is a list of matching verbs and may not be empty. \"*\" matches all verbs and, if present, must be the only entry. Required.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set"
          }
        },
        "required": [
          "verbs",
          "apiGroups",
          "resources"
        ],
        "type": "object"
      },
      "ServiceAccountSubjectv1": {
        "description": "ServiceAccountSubject holds detailed information for service-account-kind subject.",
        "properties": {
          "name": {
            "default": "",
            "description": "`name` is the name of matching ServiceAccount objects, or \"*\" to match regardless of name. Required.",
            "type": "string"
          },
          "namespace": {
            "default": "",
            "description": "`namespace` is the namespace of matching ServiceAccount objects. Required.",
            "type": "string"
          }
        },
        "required": [
          "namespace",
          "name"
        ],
        "type": "object"
      },
      "Subjectv1": {
        "description": "Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator; by user, group, or service account.",
        "properties": {
          "group": {
            "allOf": [
              {
                "$ref": "#/components/schemas/GroupSubjectv1"
              }
            ],
            "description": "`group` matches based on user group name."
          },
          "kind": {
            "default": "",
            "description": "`kind` indicates which one of the other fields is non-empty. Required",
            "type": "string"
          },
          "serviceAccount": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ServiceAccountSubjectv1"
              }
            ],
            "description": "`serviceAccount` matches ServiceAccounts."
          },
          "user": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSubjectv1"
              }
            ],
            "description": "`user` matches based on username."
          }
        },
        "required": [
          "kind"
        ],
        "type": "object",
        "x-kubernetes-unions": [
          {
            "discriminator": "kind",
            "fields-to-discriminateBy": {
              "group": "Group",
              "serviceAccount": "ServiceAccount",
              "user": "User"
            }
          }
        ]
      },
      "UserSubjectv1": {
        "description": "UserSubject holds detailed information for user-kind subject.",
        "properties": {
          "name": {
            "default": "",
            "description": "`name` is the username that matches, or \"*\" to match all usernames. Required.",
            "type": "string"
          }
        },
        "required": [
          "name"
        ],
        "type": "object"
      },
      "APIResourcev1": {
        "description": "APIResource specifies the name of a resource and whether it is namespaced.",
        "properties": {
          "categories": {
            "description": "categories is a list of the grouped resources this resource belongs to (e.g. 'all')",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "group": {
            "description": "group is the preferred group of the resource.  Empty implies the group of the containing resource list. For subresources, this may have a different value, for example: Scale\".",
            "type": "string"
          },
          "kind": {
            "default": "",
            "description": "kind is the kind for the resource (e.g. 'Foo' is the kind for a resource 'foo')",
            "type": "string"
          },
          "name": {
            "default": "",
            "description": "name is the plural name of the resource.",
            "type": "string"
          },
          "namespaced": {
            "default": false,
            "description": "namespaced indicates if a resource is namespaced or not.",
            "type": "boolean"
          },
          "shortNames": {
            "description": "shortNames is a list of suggested short names of the resource.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "singularName": {
            "default": "",
            "description": "singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.",
            "type": "string"
          },
          "storageVersionHash": {
            "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the StorageVersionHash feature gate is enabled. This field will remain optional even if it graduates.",
            "type": "string"
          },
          "verbs": {
            "description": "verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array"
          },
          "version": {
            "description": "version is the preferred version of the resource.  Empty implies the version of the containing resource list For subresources, this may have a different value, for example: v1 (while inside a v1beta1 version of the core resource's group)\".",
            "type": "string"
          }
        },
        "required": [
          "name",
          "singularName",
          "namespaced",
          "kind",
          "verbs"
        ],
        "type": "object"
      },
      "DeleteOptionsv1": {
        "description": "DeleteOptions may be provided when deleting an API object.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "dryRun": {
            "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "gracePeriodSeconds": {
            "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
            "format": "int64",
            "type": "integer"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "preconditions": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Preconditionsv1"
              }
            ],
            "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned."
          },
          "propagationPolicy": {
            "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "admission.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "admission.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "apiextensions.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "apiextensions.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "apiregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "apiregistration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "apps",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "apps",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "apps",
            "kind": "DeleteOptions",
            "version": "v1beta2"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "autoscaling",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "autoscaling",
            "kind": "DeleteOptions",
            "version": "v2"
          },
          {
            "group": "autoscaling",
            "kind": "DeleteOptions",
            "version": "v2beta1"
          },
          {
            "group": "autoscaling",
            "kind": "DeleteOptions",
            "version": "v2beta2"
          },
          {
            "group": "batch",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "batch",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "discovery.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "discovery.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "events.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "events.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "extensions",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta2"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta3"
          },
          {
            "group": "imagepolicy.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "internal.apiserver.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "node.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "node.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "node.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "policy",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "policy",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "resource.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha3"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1beta1"
          },
          {
            "group": "storagemigration.k8s.io",
            "kind": "DeleteOptions",
            "version": "v1alpha1"
          }
        ]
      },
      "FieldsV1v1": {
        "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.\n\nEach key is either a '.' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: 'f:<name>', where <name> is the name of a field in a struct, or key in a map 'v:<value>', where <value> is the exact json formatted value of a list item 'i:<index>', where <index> is position of a item in a list 'k:<keys>', where <keys> is a map of  a list item's key fields to their unique values If a key maps to an empty Fields value, the field that key represents is part of the set.\n\nThe exact format is defined in sigs.k8s.io/structured-merge-diff",
        "type": "object"
      },
      "ListMetav1": {
        "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
        "properties": {
          "continue": {
            "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
            "type": "string"
          },
          "remainingItemCount": {
            "description": "remainingItemCount is the number of subsequent items in the list which are not included in this list response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Servers older than v1.15 do not set this field. The intended use of the remainingItemCount is *estimating* the size of a collection. Clients should not rely on the remainingItemCount to be set or to be exact.",
            "format": "int64",
            "type": "integer"
          },
          "resourceVersion": {
            "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
            "type": "string"
          }
        },
        "type": "object"
      },
      "ManagedFieldsEntryv1": {
        "description": "ManagedFieldsEntry is a workflow-id, a FieldSet and the group version of the resource that the fieldset applies to.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the version of this resource that this field set applies to. The format is \"group/version\" just like the top-level APIVersion field. It is necessary to track the version of a field set because it cannot be automatically converted.",
            "type": "string"
          },
          "fieldsType": {
            "description": "FieldsType is the discriminator for the different fields format and version. There is currently only one possible value: \"FieldsV1\"",
            "type": "string"
          },
          "fieldsV1": {
            "allOf": [
              {
                "$ref": "#/components/schemas/FieldsV1v1"
              }
            ],
            "description": "FieldsV1 holds the first JSON version format as described in the \"FieldsV1\" type."
          },
          "manager": {
            "description": "Manager is an identifier of the workflow managing these fields.",
            "type": "string"
          },
          "operation": {
            "description": "Operation is the type of operation which lead to this ManagedFieldsEntry being created. The only valid values for this field are 'Apply' and 'Update'.",
            "type": "string"
          },
          "subresource": {
            "description": "Subresource is the name of the subresource used to update that object, or empty string if the object was updated through the main resource. The value of this field is used to distinguish between managers, even if they share the same name. For example, a status update will be distinct from a regular update using the same manager name. Note that the APIVersion field is not related to the Subresource field and it always corresponds to the version of the main resource.",
            "type": "string"
          },
          "time": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timev1"
              }
            ],
            "description": "Time is the timestamp of when the ManagedFields entry was added. The timestamp will also be updated if a field is added, the manager changes any of the owned fields value or removes a field. The timestamp does not update when a field is removed from the entry because another manager took it over."
          }
        },
        "type": "object"
      },
      "ObjectMetav1": {
        "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
        "properties": {
          "annotations": {
            "additionalProperties": {
              "default": "",
              "type": "string"
            },
            "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations",
            "type": "object"
          },
          "creationTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timev1"
              }
            ],
            "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "deletionGracePeriodSeconds": {
            "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
            "format": "int64",
            "type": "integer"
          },
          "deletionTimestamp": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Timev1"
              }
            ],
            "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata"
          },
          "finalizers": {
            "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order.  Order is NOT enforced because it introduces significant risk of stuck finalizers. finalizers is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
            "items": {
              "default": "",
              "type": "string"
            },
            "type": "array",
            "x-kubernetes-list-type": "set",
            "x-kubernetes-patch-strategy": "merge"
          },
          "generateName": {
            "description": "GenerateName is an optional prefix, used by the server, to generate a unique name ONLY IF the Name field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the Name field, and may be truncated by the length of the suffix required to make the value unique on the server.\n\nIf this field is specified and the generated name exists, the server will return a 409.\n\nApplied only if Name is not specified. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency",
            "type": "string"
          },
          "generation": {
            "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
            "format": "int64",
            "type": "integer"
          },
          "labels": {
            "additionalProperties": {
              "default": "",
              "type": "string"
            },
            "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels",
            "type": "object"
          },
          "managedFields": {
            "description": "ManagedFields maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like \"ci-cd\". The set of fields is always in the version that the workflow used when modifying the object.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/ManagedFieldsEntryv1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "name": {
            "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
            "type": "string"
          },
          "namespace": {
            "description": "Namespace defines the space within which each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces",
            "type": "string"
          },
          "ownerReferences": {
            "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, then an entry in this list will point to this controller, with the controller field set to true. There cannot be more than one managing controller.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/OwnerReferencev1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-map-keys": [
              "uid"
            ],
            "x-kubernetes-list-type": "map",
            "x-kubernetes-patch-merge-key": "uid",
            "x-kubernetes-patch-strategy": "merge"
          },
          "resourceVersion": {
            "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency",
            "type": "string"
          },
          "uid": {
            "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
            "type": "string"
          }
        },
        "type": "object"
      },
      "OwnerReferencev1": {
        "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
        "properties": {
          "apiVersion": {
            "default": "",
            "description": "API version of the referent.",
            "type": "string"
          },
          "blockOwnerDeletion": {
            "description": "If true, AND if the owner has the \"foregroundDeletion\" finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. See https://kubernetes.io/docs/concepts/architecture/garbage-collection/#foreground-deletion for how the garbage collector interacts with this field and enforces the foreground deletion. Defaults to false. To set this field, a user needs \"delete\" permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
            "type": "boolean"
          },
          "controller": {
            "description": "If true, this reference points to the managing controller.",
            "type": "boolean"
          },
          "kind": {
            "default": "",
            "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "name": {
            "default": "",
            "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#names",
            "type": "string"
          },
          "uid": {
            "default": "",
            "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
            "type": "string"
          }
        },
        "required": [
          "apiVersion",
          "kind",
          "name",
          "uid"
        ],
        "type": "object",
        "x-kubernetes-map-type": "atomic"
      },
      "Patchv1": {
        "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.",
        "type": "object"
      },
      "Preconditionsv1": {
        "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
        "properties": {
          "resourceVersion": {
            "description": "Specifies the target ResourceVersion",
            "type": "string"
          },
          "uid": {
            "description": "Specifies the target UID.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Statusv1": {
        "description": "Status is a return value for calls that don't return other objects.",
        "properties": {
          "apiVersion": {
            "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
            "type": "string"
          },
          "code": {
            "description": "Suggested HTTP return code for this status, 0 if not set.",
            "format": "int32",
            "type": "integer"
          },
          "details": {
            "allOf": [
              {
                "$ref": "#/components/schemas/StatusDetailsv1"
              }
            ],
            "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type.",
            "x-kubernetes-list-type": "atomic"
          },
          "kind": {
            "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "message": {
            "description": "A human-readable description of the status of this operation.",
            "type": "string"
          },
          "metadata": {
            "allOf": [
              {
                "$ref": "#/components/schemas/ListMetav1"
              }
            ],
            "default": {},
            "description": "Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
          },
          "reason": {
            "description": "A machine-readable description of why this operation is in the \"Failure\" status. If this value is empty there is no information available. A Reason clarifies an HTTP status code but does not override it.",
            "type": "string"
          },
          "status": {
            "description": "Status of the operation. One of: \"Success\" or \"Failure\". More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status",
            "type": "string"
          }
        },
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "",
            "kind": "Status",
            "version": "v1"
          }
        ]
      },
      "StatusCausev1": {
        "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
        "properties": {
          "field": {
            "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
            "type": "string"
          },
          "message": {
            "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
            "type": "string"
          },
          "reason": {
            "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
            "type": "string"
          }
        },
        "type": "object"
      },
      "StatusDetailsv1": {
        "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
        "properties": {
          "causes": {
            "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/StatusCausev1"
                }
              ],
              "default": {}
            },
            "type": "array",
            "x-kubernetes-list-type": "atomic"
          },
          "group": {
            "description": "The group attribute of the resource associated with the status StatusReason.",
            "type": "string"
          },
          "kind": {
            "description": "The kind attribute of the resource associated with the status StatusReason. On some operations may differ from the requested resource Kind. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
            "type": "string"
          },
          "name": {
            "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
            "type": "string"
          },
          "retryAfterSeconds": {
            "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
            "format": "int32",
            "type": "integer"
          },
          "uid": {
            "description": "UID of the resource. (when there is a single resource which can be described). More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Timev1": {
        "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
        "format": "date-time",
        "type": "string"
      },
      "WatchEventv1": {
        "description": "Event represents a single event to a watched resource.",
        "properties": {
          "object": {
            "allOf": [
              {
                "$ref": "#/components/schemas/RawExtension"
              }
            ],
            "description": "Object is:\n * If Type is Added or Modified: the new state of the object.\n * If Type is Deleted: the state of the object immediately before deletion.\n * If Type is Error: *Status is recommended; other types may make sense\n   depending on context."
          },
          "type": {
            "default": "",
            "type": "string"
          }
        },
        "required": [
          "type",
          "object"
        ],
        "type": "object",
        "x-kubernetes-group-version-kind": [
          {
            "group": "",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "admission.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "admission.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "admissionregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "apiextensions.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "apiextensions.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "apiregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "apiregistration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "apps",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "apps",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "apps",
            "kind": "WatchEvent",
            "version": "v1beta2"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "authentication.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "autoscaling",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "autoscaling",
            "kind": "WatchEvent",
            "version": "v2"
          },
          {
            "group": "autoscaling",
            "kind": "WatchEvent",
            "version": "v2beta1"
          },
          {
            "group": "autoscaling",
            "kind": "WatchEvent",
            "version": "v2beta2"
          },
          {
            "group": "batch",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "batch",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "certificates.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "coordination.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "discovery.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "discovery.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "events.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "events.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "extensions",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta2"
          },
          {
            "group": "flowcontrol.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta3"
          },
          {
            "group": "imagepolicy.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "internal.apiserver.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "networking.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "node.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "node.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "node.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "policy",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "policy",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "rbac.authorization.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "resource.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha3"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "scheduling.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "WatchEvent",
            "version": "v1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          },
          {
            "group": "storage.k8s.io",
            "kind": "WatchEvent",
            "version": "v1beta1"
          },
          {
            "group": "storagemigration.k8s.io",
            "kind": "WatchEvent",
            "version": "v1alpha1"
          }
        ]
      },
      "RawExtension": {
        "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has RawExtension as its type in your external, versioned struct, and Object in your internal struct. You also need to register your various plugin types.\n\n// Internal package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.Object `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// External package:\n\n\ttype MyAPIObject struct {\n\t\truntime.TypeMeta `json:\",inline\"`\n\t\tMyPlugin runtime.RawExtension `json:\"myPlugin\"`\n\t}\n\n\ttype PluginA struct {\n\t\tAOption string `json:\"aOption\"`\n\t}\n\n// On the wire, the JSON will look something like this:\n\n\t{\n\t\t\"kind\":\"MyAPIObject\",\n\t\t\"apiVersion\":\"v1\",\n\t\t\"myPlugin\": {\n\t\t\t\"kind\":\"PluginA\",\n\t\t\t\"aOption\":\"foo\",\n\t\t},\n\t}\n\nSo what happens? Decode first uses json or yaml to unmarshal the serialized data into your external MyAPIObject. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's DefaultScheme has conversion functions installed which will unpack the JSON stored in RawExtension, turning it into the correct object type, and storing it in the Object. (TODO: In the case where the object is of an unknown type, a runtime.Unknown object will be created and stored.)",
        "type": "object"
      }
    },
    "securitySchemes": {
      "BearerToken": {
        "description": "Bearer Token authentication",
        "in": "header",
        "name": "authorization",
        "type": "apiKey"
      }
    }
  },
  "info": {
    "title": "Kubernetes",
    "version": "unversioned"
  },
  "openapi": "3.0.0",
  "paths": {}
}